"""agents_final_updates

Revision ID: 53d9d68061c6
Revises: fce523ba9422
Create Date: 2025-07-19 16:14:13.390225

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "53d9d68061c6"
down_revision: Union[str, None] = "fce523ba9422"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Define old and new enums
old_subscription_enum = postgresql.ENUM("active", "paused", "cancelled", name="subscriptionstatus")
new_subscription_enum = postgresql.ENUM("active", "cancelled", "inactive", name="subscriptionstatus_new")


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("agents", "instance_hash", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_column("agents", "is_active")
    # ### end Alembic commands ###

    # 1. Rename old enum type
    op.execute("ALTER TYPE subscriptionstatus RENAME TO subscriptionstatus_old")

    # 2. Create new enum type
    new_subscription_enum.create(op.get_bind())

    # 3. Alter column to use new enum
    op.alter_column(
        "subscriptions",
        "status",
        type_=new_subscription_enum,
        existing_type=old_subscription_enum,
        postgresql_using="status::text::subscriptionstatus_new",
    )

    # 4. Drop old enum
    op.execute("DROP TYPE subscriptionstatus_old")

    # 5. Rename new enum to original name
    op.execute("ALTER TYPE subscriptionstatus_new RENAME TO subscriptionstatus")


def downgrade() -> None:
    """Downgrade schema."""
    old_subscription_enum.create(op.get_bind())

    # Downgrade values ('inactive' â†’ 'paused')
    op.execute("UPDATE subscriptions SET status = 'paused' WHERE status = 'inactive'")

    # Switch back to old enum type
    op.alter_column(
        "subscriptions",
        "status",
        type_=old_subscription_enum,
        existing_type=new_subscription_enum,
        postgresql_using="status::text::subscriptionstatus_old",
    )

    # Drop modified enum
    new_subscription_enum.drop(op.get_bind())

    # Rename back to original
    op.execute("ALTER TYPE subscriptionstatus_old RENAME TO subscriptionstatus")

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("agents", sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.alter_column("agents", "instance_hash", existing_type=sa.VARCHAR(), nullable=False)
    # ### end Alembic commands ###
